<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Memory Universe</title>
  <style>
    body { margin: 0; overflow: hidden; background: black; }
    canvas { display: block; }
  </style>
</head>
<body>
<script src="https://cdn.jsdelivr.net/npm/three@0.153.0/build/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.153.0/examples/js/postprocessing/EffectComposer.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.153.0/examples/js/postprocessing/RenderPass.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.153.0/examples/js/postprocessing/UnrealBloomPass.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.153.0/examples/js/loaders/FontLoader.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.153.0/examples/js/geometries/TextGeometry.js"></script>

<script>
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
  camera.position.z = 15;

  const renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.body.appendChild(renderer.domElement);

  const composer = new THREE.EffectComposer(renderer);
  composer.addPass(new THREE.RenderPass(scene, camera));
  const bloom = new THREE.UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.5, 0.4, 0.85);
  bloom.strength = 1.2;
  bloom.radius = 0.6;
  composer.addPass(bloom);

  // Glowing center sphere
  const sphereGeometry = new THREE.SphereGeometry(2, 64, 64);
  const sphereMaterial = new THREE.MeshBasicMaterial({ color: 0xff00ff });
  const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
  scene.add(sphere);

  // Orbiting sample images
  const loader = new THREE.TextureLoader();
  const orbitImages = [];
  const urls = [
    'https://placekitten.com/100/100',
    'https://placekitten.com/101/101',
    'https://placekitten.com/102/102',
    'https://placekitten.com/103/103'
  ];
  urls.forEach((url, i) => {
    loader.load(url, texture => {
      const mat = new THREE.MeshBasicMaterial({ map: texture, transparent: true });
      const geo = new THREE.PlaneGeometry(1.5, 1.5);
      const mesh = new THREE.Mesh(geo, mat);
      scene.add(mesh);
      orbitImages.push({ mesh, angle: i * Math.PI * 2 / urls.length });
    });
  });

  // Floating particles
  const starsGeo = new THREE.BufferGeometry();
  const starCount = 2000;
  const starPos = new Float32Array(starCount * 3);
  for (let i = 0; i < starCount * 3; i++) starPos[i] = (Math.random() - 0.5) * 100;
  starsGeo.setAttribute('position', new THREE.BufferAttribute(starPos, 3));
  const starMat = new THREE.PointsMaterial({ color: 0xffffff, size: 0.2 });
  const stars = new THREE.Points(starsGeo, starMat);
  scene.add(stars);

  // Floating spiral text
  const fontLoader = new THREE.FontLoader();
  fontLoader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', font => {
    const material = new THREE.MeshBasicMaterial({ color: 0x00ffcc });
    const text = new THREE.Mesh(
      new THREE.TextGeometry('MEMORIES FLOATING IN SPACE', {
        font,
        size: 0.5,
        height: 0.05,
        curveSegments: 12,
      }), material);
    scene.add(text);
    text.position.y = 3;
    text.rotation.y = Math.PI / 4;

    animateText(text);
  });

  function animateText(textMesh) {
    let t = 0;
    const animate = () => {
      t += 0.01;
      textMesh.position.x = Math.sin(t) * 4;
      textMesh.position.z = Math.cos(t) * 4;
      requestAnimationFrame(animate);
    };
    animate();
  }

  // Animation loop
  const clock = new THREE.Clock();
  function animate() {
    requestAnimationFrame(animate);

    const t = clock.getElapsedTime();
    sphere.scale.setScalar(1 + Math.sin(t * 2) * 0.05);

    orbitImages.forEach((obj, i) => {
      obj.angle += 0.002 + i * 0.0005;
      const r = 6;
      obj.mesh.position.x = Math.cos(obj.angle) * r;
      obj.mesh.position.z = Math.sin(obj.angle) * r;
      obj.mesh.lookAt(camera.position);
    });

    camera.position.x = Math.sin(t * 0.3) * 5;
    camera.position.y = Math.cos(t * 0.3) * 3;
    camera.lookAt(0, 0, 0);

    composer.render();
  }

  animate();

  window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
    composer.setSize(window.innerWidth, window.innerHeight);
  });
</script>
</body>
</html>
